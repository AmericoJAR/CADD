# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Alocacacaodisciplinasemdepartamento(models.Model):
    id = models.BigAutoField(primary_key=True)
    departamento = models.ForeignKey('Departamento', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'alocacacaodisciplinasemdepartamento'


class Alternativa(models.Model):
    id = models.BigAutoField(primary_key=True)
    descritor = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'alternativa'


class Aluno(models.Model):
    id = models.BigAutoField(primary_key=True)
    matricula = models.CharField(max_length=255, blank=True, null=True)
    cpf = models.CharField(max_length=255, blank=True, null=True)
    datanascimento = models.DateTimeField(db_column='dataNascimento', blank=True, null=True)  # Field name made lowercase.
    endereco = models.CharField(max_length=255, blank=True, null=True)
    uf = models.CharField(db_column='UF', max_length=255, blank=True, null=True)  # Field name made lowercase.
    bairro = models.CharField(max_length=255, blank=True, null=True)
    cidade = models.CharField(max_length=255, blank=True, null=True)
    numero = models.CharField(max_length=255, blank=True, null=True)
    rua = models.CharField(max_length=255, blank=True, null=True)
    nome = models.CharField(max_length=255, blank=True, null=True)
    historico = models.ForeignKey('Historicoescolar', models.DO_NOTHING, blank=True, null=True)
    versaocurso = models.ForeignKey('Versaocurso', models.DO_NOTHING, db_column='versaoCurso_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'aluno'


class Atividadecomplementar(models.Model):
    id = models.BigAutoField(primary_key=True)
    cargahorariamax = models.TextField(db_column='cargaHorariaMax', blank=True, null=True)  # Field name made lowercase.
    cargahorariamin = models.TextField(db_column='cargaHorariaMin', blank=True, null=True)  # Field name made lowercase.
    tipo = models.ForeignKey('Tipoatividadecomplementar', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'atividadecomplementar'


class Aula(models.Model):
    id = models.BigAutoField(primary_key=True)
    dia = models.IntegerField(blank=True, null=True)
    fim = models.DateTimeField(blank=True, null=True)
    inicio = models.DateTimeField(blank=True, null=True)
    local = models.ForeignKey('Localaula', models.DO_NOTHING, blank=True, null=True)
    turma = models.ForeignKey('Turma', models.DO_NOTHING, db_column='TURMA_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'aula'


class Avaliacaoegresso(models.Model):
    id = models.BigAutoField(primary_key=True)
    especialidade = models.CharField(max_length=255, blank=True, null=True)
    questao10_outro = models.CharField(db_column='questao10_Outro', max_length=255, blank=True, null=True)  # Field name made lowercase.
    questao15_area = models.CharField(db_column='questao15_Area', max_length=255, blank=True, null=True)  # Field name made lowercase.
    alunoavaliador = models.ForeignKey(Aluno, models.DO_NOTHING, db_column='alunoAvaliador_id')  # Field name made lowercase.
    formavaliacao = models.ForeignKey('Pesquisaavaliacao', models.DO_NOTHING, db_column='formAvaliacao_id')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'avaliacaoegresso'


class Avaliacaoturma(models.Model):
    id = models.BigAutoField(primary_key=True)
    aspectosnegativos = models.TextField(db_column='aspectosNegativos', blank=True, null=True)  # Field name made lowercase.
    aspectospositivos = models.TextField(db_column='aspectosPositivos', blank=True, null=True)  # Field name made lowercase.
    alunoavaliador = models.ForeignKey(Aluno, models.DO_NOTHING, db_column='alunoAvaliador_id')  # Field name made lowercase.
    turmaavaliada = models.ForeignKey('Turma', models.DO_NOTHING, db_column='turmaAvaliada_id')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'avaliacaoturma'


class Blocoequivalencia(models.Model):
    id = models.BigAutoField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'blocoequivalencia'


class Comprovante(models.Model):
    id = models.BigAutoField(primary_key=True)
    contenttype = models.CharField(db_column='contentType', max_length=255, blank=True, null=True)  # Field name made lowercase.
    data = models.TextField(blank=True, null=True)
    nome = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comprovante'


class Curso(models.Model):
    id = models.BigAutoField(primary_key=True)
    nome = models.CharField(max_length=255, blank=True, null=True)
    sigla = models.CharField(max_length=255, blank=True, null=True)
    coordenador = models.ForeignKey('Professor', models.DO_NOTHING, blank=True, null=True)
    coordenadoratividadescomplementares = models.ForeignKey('Professor', models.DO_NOTHING, db_column='coordenadorAtividadesComplementares_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'curso'


class CursoDisciplina(models.Model):
    curso = models.ForeignKey(Curso, models.DO_NOTHING, db_column='Curso_id')  # Field name made lowercase.
    disciplinas = models.ForeignKey('Disciplina', models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'curso_disciplina'


class Departamento(models.Model):
    id = models.BigAutoField(primary_key=True)
    nome = models.CharField(max_length=255, blank=True, null=True)
    sigla = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'departamento'


class DepartamentoDisciplina(models.Model):
    departamento = models.ForeignKey(Departamento, models.DO_NOTHING, db_column='Departamento_id', primary_key=True)  # Field name made lowercase.
    disciplinas = models.ForeignKey('Disciplina', models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'departamento_disciplina'
        unique_together = (('departamento', 'disciplinas'),)


class DepartamentoProfessor(models.Model):
    departamento = models.ForeignKey(Departamento, models.DO_NOTHING, db_column='Departamento_id', primary_key=True)  # Field name made lowercase.
    professores = models.ForeignKey('Professor', models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'departamento_professor'
        unique_together = (('departamento', 'professores'),)


class Disciplina(models.Model):
    id = models.BigAutoField(primary_key=True)
    cargahoraria = models.IntegerField(db_column='cargaHoraria')  # Field name made lowercase.
    codigo = models.CharField(max_length=255, blank=True, null=True)
    ehoptativa = models.TextField(db_column='ehOptativa', blank=True, null=True)  # Field name made lowercase. This field type is a guess.
    nome = models.CharField(max_length=255, blank=True, null=True)
    quantidadecreditos = models.IntegerField(db_column='quantidadeCreditos', blank=True, null=True)  # Field name made lowercase.
    versaocurso = models.ForeignKey('Versaocurso', models.DO_NOTHING, db_column='versaoCurso_id', blank=True, null=True)  # Field name made lowercase.
    alocacao_depto = models.ForeignKey(Alocacacaodisciplinasemdepartamento, models.DO_NOTHING, db_column='ALOCACAO_DEPTO_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'disciplina'


class DisciplinaPrereqs(models.Model):
    grade = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='GRADE_ID', primary_key=True)  # Field name made lowercase.
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='DISCIPLINA_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'disciplina_prereqs'
        unique_together = (('grade', 'disciplina'),)


class DisciplinasEquivalentes(models.Model):
    bloco = models.ForeignKey(Blocoequivalencia, models.DO_NOTHING, db_column='BLOCO_ID', primary_key=True)  # Field name made lowercase.
    disciplinasequivalentes = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='DISCIPLINASEQUIVALENTES_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'disciplinas_equivalentes'
        unique_together = (('bloco', 'disciplinasequivalentes'),)


class DisciplinasOriginais(models.Model):
    bloco = models.ForeignKey(Blocoequivalencia, models.DO_NOTHING, db_column='BLOCO_ID', primary_key=True)  # Field name made lowercase.
    disciplinasoriginais = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='DISCIPLINASORIGINAIS_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'disciplinas_originais'
        unique_together = (('bloco', 'disciplinasoriginais'),)


class Documentoprofessor(models.Model):
    id = models.BigAutoField(primary_key=True)
    categoria = models.CharField(max_length=255, blank=True, null=True)
    dataupload = models.DateTimeField(db_column='dataUpload', blank=True, null=True)  # Field name made lowercase.
    nome = models.CharField(max_length=255, blank=True, null=True)
    documento = models.ForeignKey(Comprovante, models.DO_NOTHING, blank=True, null=True)
    professor = models.ForeignKey('Professor', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'documentoprofessor'


class Encontropresencial(models.Model):
    id = models.BigAutoField(primary_key=True)
    data = models.DateTimeField(blank=True, null=True)
    turma = models.ForeignKey('Turma', models.DO_NOTHING, db_column='TURMA_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'encontropresencial'


class FrequenciaAlunos(models.Model):
    encontro = models.ForeignKey(Encontropresencial, models.DO_NOTHING, db_column='ENCONTRO_ID')  # Field name made lowercase.
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING, db_column='ALUNO_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'frequencia_alunos'


class Gradedisponibilidade(models.Model):
    id = models.BigAutoField(primary_key=True)
    ano = models.IntegerField(blank=True, null=True)
    periodo = models.IntegerField(blank=True, null=True)
    professor = models.ForeignKey('Professor', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'gradedisponibilidade'


class GradedisponibilidadeDisciplina(models.Model):
    grade = models.ForeignKey(Gradedisponibilidade, models.DO_NOTHING, db_column='GRADE_ID', primary_key=True)  # Field name made lowercase.
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='DISCIPLINA_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'gradedisponibilidade_disciplina'
        unique_together = (('grade', 'disciplina'),)


class Historicoescolar(models.Model):
    id = models.BigAutoField(primary_key=True)
    versaocurso = models.ForeignKey('Versaocurso', models.DO_NOTHING, db_column='versaoCurso_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'historicoescolar'


class Inscricao(models.Model):
    id = models.BigAutoField(primary_key=True)
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING, blank=True, null=True)
    avaliacao = models.ForeignKey('Notafinal', models.DO_NOTHING, blank=True, null=True)
    turma = models.ForeignKey('Turma', models.DO_NOTHING, db_column='TURMA_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'inscricao'


class Itemhistoricoescolar(models.Model):
    id = models.BigAutoField(primary_key=True)
    ano = models.IntegerField(blank=True, null=True)
    periodo = models.IntegerField(blank=True, null=True)
    situacao = models.IntegerField(blank=True, null=True)
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, blank=True, null=True)
    historico_escolar = models.ForeignKey(Historicoescolar, models.DO_NOTHING, db_column='HISTORICO_ESCOLAR_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'itemhistoricoescolar'


class Itemhorario(models.Model):
    id = models.BigAutoField(primary_key=True)
    dia = models.IntegerField(blank=True, null=True)
    fim = models.DateTimeField(blank=True, null=True)
    inicio = models.DateTimeField(blank=True, null=True)
    gradedisponibilidade = models.ForeignKey(Gradedisponibilidade, models.DO_NOTHING, db_column='GRADEDISPONIBILIDADE_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'itemhorario'


class Itemmatriculaforaprazo(models.Model):
    id = models.BigAutoField(primary_key=True)
    datasolicitacao = models.DateTimeField(db_column='dataSolicitacao', blank=True, null=True)  # Field name made lowercase.
    observacao = models.CharField(max_length=255, blank=True, null=True)
    opcao = models.IntegerField()
    status = models.IntegerField(blank=True, null=True)
    departamento = models.ForeignKey(Departamento, models.DO_NOTHING)
    turma = models.ForeignKey('Turma', models.DO_NOTHING)
    solicitacao_inclusao = models.ForeignKey('Matriculaforaprazo', models.DO_NOTHING, db_column='SOLICITACAO_INCLUSAO_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'itemmatriculaforaprazo'


class Itempedidoisencaodisciplina(models.Model):
    id = models.BigAutoField(primary_key=True)
    cargahorariadisciplinaexterna = models.TextField(db_column='cargaHorariaDisciplinaExterna', blank=True, null=True)  # Field name made lowercase.
    dataanalise = models.DateTimeField(db_column='dataAnalise', blank=True, null=True)  # Field name made lowercase.
    datacriacao = models.DateTimeField(db_column='dataCriacao', blank=True, null=True)  # Field name made lowercase.
    descritordisciplinaexterna = models.CharField(db_column='descritorDisciplinaExterna', max_length=255, blank=True, null=True)  # Field name made lowercase.
    motivo = models.CharField(max_length=255, blank=True, null=True)
    motivoindeferimento = models.CharField(db_column='motivoIndeferimento', max_length=255, blank=True, null=True)  # Field name made lowercase.
    notafinaldisciplinaexterna = models.DecimalField(db_column='notaFinalDisciplinaExterna', max_digits=19, decimal_places=2, blank=True, null=True)  # Field name made lowercase.
    observacao = models.CharField(max_length=255, blank=True, null=True)
    situacao = models.CharField(max_length=255, blank=True, null=True)
    comprovante = models.ForeignKey(Comprovante, models.DO_NOTHING, blank=True, null=True)
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, blank=True, null=True)
    professor = models.ForeignKey('Professor', models.DO_NOTHING, blank=True, null=True)
    pedido_isencao = models.ForeignKey('Pedidoisencaodisciplinas', models.DO_NOTHING, db_column='PEDIDO_ISENCAO_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'itempedidoisencaodisciplina'


class Listaespera(models.Model):
    id = models.BigAutoField(primary_key=True)
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'listaespera'


class ListaesperaAluno(models.Model):
    listaespera = models.ForeignKey(Listaespera, models.DO_NOTHING, db_column='LISTAESPERA_ID')  # Field name made lowercase.
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING, db_column='ALUNO_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'listaespera_aluno'


class Localaula(models.Model):
    id = models.BigAutoField(primary_key=True)
    capacidade = models.IntegerField(blank=True, null=True)
    descricao = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'localaula'


class Matriculaforaprazo(models.Model):
    id = models.BigAutoField(primary_key=True)
    observacoes = models.CharField(max_length=255, blank=True, null=True)
    ano = models.IntegerField(blank=True, null=True)
    periodo = models.IntegerField(blank=True, null=True)
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING)
    comprovante = models.ForeignKey(Comprovante, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'matriculaforaprazo'


class Notafinal(models.Model):
    id = models.BigAutoField(primary_key=True)
    frequencia = models.DecimalField(max_digits=19, decimal_places=2, blank=True, null=True)
    notap1 = models.DecimalField(db_column='notaP1', max_digits=19, decimal_places=2, blank=True, null=True)  # Field name made lowercase.
    notap2 = models.DecimalField(db_column='notaP2', max_digits=19, decimal_places=2, blank=True, null=True)  # Field name made lowercase.
    notap3 = models.DecimalField(db_column='notaP3', max_digits=19, decimal_places=2, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'notafinal'


class Pedidoisencaodisciplinas(models.Model):
    id = models.BigAutoField(primary_key=True)
    dataregistro = models.DateTimeField(db_column='dataRegistro', blank=True, null=True)  # Field name made lowercase.
    situacao = models.IntegerField(blank=True, null=True)
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pedidoisencaodisciplinas'


class PedidoisencaodisciplinasComprovante(models.Model):
    pedidoisencaodisciplinas = models.ForeignKey(Pedidoisencaodisciplinas, models.DO_NOTHING, db_column='PedidoIsencaoDisciplinas_id')  # Field name made lowercase.
    historicosescolares = models.ForeignKey(Comprovante, models.DO_NOTHING, db_column='historicosEscolares_id', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'pedidoisencaodisciplinas_comprovante'


class Pesquisaavaliacao(models.Model):
    id = models.BigAutoField(primary_key=True)
    descritor = models.CharField(max_length=255, blank=True, null=True)
    nome = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pesquisaavaliacao'


class Professor(models.Model):
    id = models.BigAutoField(primary_key=True)
    matricula = models.CharField(max_length=255, blank=True, null=True)
    cpf = models.CharField(max_length=255, blank=True, null=True)
    datanascimento = models.DateTimeField(db_column='dataNascimento', blank=True, null=True)  # Field name made lowercase.
    endereco = models.CharField(max_length=255, blank=True, null=True)
    uf = models.CharField(db_column='UF', max_length=255, blank=True, null=True)  # Field name made lowercase.
    bairro = models.CharField(max_length=255, blank=True, null=True)
    cidade = models.CharField(max_length=255, blank=True, null=True)
    numero = models.CharField(max_length=255, blank=True, null=True)
    rua = models.CharField(max_length=255, blank=True, null=True)
    nome = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'professor'


class ProfessorDisciplina(models.Model):
    professor = models.ForeignKey(Professor, models.DO_NOTHING, db_column='PROFESSOR_ID', primary_key=True)  # Field name made lowercase.
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, db_column='DISCIPLINA_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'professor_disciplina'
        unique_together = (('professor', 'disciplina'),)


class ProfessorGradedisponibilidade(models.Model):
    professor = models.ForeignKey(Professor, models.DO_NOTHING, db_column='Professor_id', primary_key=True)  # Field name made lowercase.
    grades = models.ForeignKey(Gradedisponibilidade, models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'professor_gradedisponibilidade'
        unique_together = (('professor', 'grades'),)


class Quesito(models.Model):
    id = models.BigAutoField(primary_key=True)
    enunciado = models.CharField(max_length=255)
    formulario = models.ForeignKey(Pesquisaavaliacao, models.DO_NOTHING, db_column='FORMULARIO_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'quesito'


class QuesitoAlternativa(models.Model):
    quesito = models.ForeignKey(Quesito, models.DO_NOTHING, db_column='QUESITO_ID')  # Field name made lowercase.
    alternativa = models.ForeignKey(Alternativa, models.DO_NOTHING, db_column='ALTERNATIVA_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'quesito_alternativa'


class Registroatividadecomplementar(models.Model):
    id = models.BigAutoField(primary_key=True)
    cargahoraria = models.TextField(db_column='cargaHoraria', blank=True, null=True)  # Field name made lowercase.
    dataanalise = models.DateTimeField(db_column='dataAnalise', blank=True, null=True)  # Field name made lowercase.
    datasolicitacao = models.DateTimeField(db_column='dataSolicitacao', blank=True, null=True)  # Field name made lowercase.
    descricao = models.CharField(max_length=255, blank=True, null=True)
    estado = models.IntegerField(blank=True, null=True)
    justificativa = models.CharField(max_length=255, blank=True, null=True)
    atividade = models.ForeignKey(Atividadecomplementar, models.DO_NOTHING, blank=True, null=True)
    avaliador = models.ForeignKey(Professor, models.DO_NOTHING, blank=True, null=True)
    documento = models.ForeignKey(Comprovante, models.DO_NOTHING, blank=True, null=True)
    aluno = models.ForeignKey(Aluno, models.DO_NOTHING, db_column='ALUNO_ID', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'registroatividadecomplementar'


class Resposta(models.Model):
    avaliacaoturma = models.ForeignKey(Avaliacaoturma, models.DO_NOTHING, db_column='AVALIACAOTURMA_ID', primary_key=True)  # Field name made lowercase.
    alternativa = models.ForeignKey(Alternativa, models.DO_NOTHING, db_column='ALTERNATIVA_ID')  # Field name made lowercase.
    respostas_order = models.IntegerField(db_column='respostas_ORDER')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'resposta'
        unique_together = (('avaliacaoturma', 'respostas_order'),)


class RespostaEgresso(models.Model):
    avaliacaoegresso = models.ForeignKey(Avaliacaoegresso, models.DO_NOTHING, db_column='AVALIACAOEGRESSO_ID')  # Field name made lowercase.
    alternativa = models.ForeignKey(Alternativa, models.DO_NOTHING, db_column='ALTERNATIVA_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'resposta_egresso'


class Tabelaatividadescomplementares(models.Model):
    id = models.BigAutoField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'tabelaatividadescomplementares'


class TabelaatividadescomplementaresAtividadecomplementar(models.Model):
    tabelaatividadescomplementares = models.ForeignKey(Tabelaatividadescomplementares, models.DO_NOTHING, db_column='TabelaAtividadesComplementares_id')  # Field name made lowercase.
    atividades = models.ForeignKey(Atividadecomplementar, models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'tabelaatividadescomplementares_atividadecomplementar'


class Tabelaequivalencias(models.Model):
    id = models.BigAutoField(primary_key=True)
    versaocursocorrespondente = models.ForeignKey('Versaocurso', models.DO_NOTHING, db_column='versaoCursoCorrespondente_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'tabelaequivalencias'


class TabelaequivalenciasBlocoequivalencia(models.Model):
    tabelaequivalencias = models.ForeignKey(Tabelaequivalencias, models.DO_NOTHING, db_column='TabelaEquivalencias_id', primary_key=True)  # Field name made lowercase.
    blocosequivalencia = models.ForeignKey(Blocoequivalencia, models.DO_NOTHING, db_column='blocosEquivalencia_id', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'tabelaequivalencias_blocoequivalencia'
        unique_together = (('tabelaequivalencias', 'blocosequivalencia'),)


class Tipoatividadecomplementar(models.Model):
    id = models.BigAutoField(primary_key=True)
    categoria = models.IntegerField(blank=True, null=True)
    descricao = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tipoatividadecomplementar'


class Turma(models.Model):
    id = models.BigAutoField(primary_key=True)
    capacidademaxima = models.IntegerField(db_column='capacidadeMaxima')  # Field name made lowercase.
    codigo = models.CharField(max_length=255, blank=True, null=True)
    ano = models.IntegerField(blank=True, null=True)
    periodo = models.IntegerField(blank=True, null=True)
    disciplina = models.ForeignKey(Disciplina, models.DO_NOTHING, blank=True, null=True)
    professor = models.ForeignKey(Professor, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'turma'


class UserProfile(models.Model):
    type = models.CharField(db_column='TYPE', unique=True, max_length=30)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'user_profile'


class UserUserProfile(models.Model):
    user = models.ForeignKey('Users', models.DO_NOTHING, db_column='USER_ID', primary_key=True)  # Field name made lowercase.
    user_profile = models.ForeignKey(UserProfile, models.DO_NOTHING, db_column='USER_PROFILE_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'user_user_profile'
        unique_together = (('user', 'user_profile'),)


class Users(models.Model):
    dob = models.DateTimeField(blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    login = models.CharField(unique=True, max_length=255)
    matricula = models.CharField(max_length=255, blank=True, null=True)
    nome = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'


class Versaocurso(models.Model):
    id = models.BigAutoField(primary_key=True)
    cargahorariaminaitvcomp = models.TextField(db_column='cargaHorariaMinAitvComp', blank=True, null=True)  # Field name made lowercase.
    cargahorariaminoptativas = models.TextField(db_column='cargaHorariaMinOptativas', blank=True, null=True)  # Field name made lowercase.
    numero = models.CharField(max_length=255, blank=True, null=True)
    qtdperiodominimo = models.IntegerField(db_column='qtdPeriodoMinimo', blank=True, null=True)  # Field name made lowercase.
    situacao = models.IntegerField(blank=True, null=True)
    atividades = models.ForeignKey(Tabelaatividadescomplementares, models.DO_NOTHING, blank=True, null=True)
    curso = models.ForeignKey(Curso, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'versaocurso'


class VersaocursoTabelaequivalencias(models.Model):
    versaocurso = models.ForeignKey(Versaocurso, models.DO_NOTHING, db_column='VersaoCurso_id', primary_key=True)  # Field name made lowercase.
    tabelasequivalencias = models.ForeignKey(Tabelaequivalencias, models.DO_NOTHING, db_column='tabelasEquivalencias_id', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'versaocurso_tabelaequivalencias'
        unique_together = (('versaocurso', 'tabelasequivalencias'),)
